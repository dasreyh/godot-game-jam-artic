[gd_scene load_steps=13 format=2]

[ext_resource path="res://scripts/items/stamina-item.gd" type="Script" id=1]
[ext_resource path="res://assets/sound/player/item-pickup.wav" type="AudioStream" id=2]

[sub_resource type="Shader" id=10]
code = "

shader_type spatial;
render_mode depth_draw_alpha_prepass, specular_schlick_ggx, unshaded;

uniform float FresnelPower = 2.5;
uniform vec4 FresnelColor : hint_color;
uniform vec4 Color : hint_color;
uniform vec3 Tiling = vec3(1.0, 1.0, 0.0);
uniform vec3 Offset = vec3(0.0, 0.0, 0.0);
uniform sampler2D Ice_Texture : hint_albedo;
uniform float RefractionAmount = 1.0;
uniform float Metallic = 0.134;
uniform float Smoothness = 0.627;
uniform float Normals = 0.77;


// TilingAndOffsetUV

vec2 ti1ingN0ffsetFunc(vec2 _uv_tN0, vec2 _offset_tN0){
	return vec2(mod(_uv_tN0.x + _offset_tN0.x, 1.0), mod(_uv_tN0.y + _offset_tN0.y, 1.0));
}

// ReadNormalMap

// Pulled straight from Godot's scene.glsl file
vec3 read_normalmap(in vec3 normalmap, in vec3 normal, in vec3 tangent, in vec3 binormal, in float normaldepth) {
	normalmap.xy = normalmap.xy * 2.0 - 1.0;
	normalmap.z = sqrt(max(0.0, 1.0 - dot(normalmap.xy, normalmap.xy))); //always ignore Z, as it can be RG packed, Z may be pos/neg, etc.
	
	return normalize(mix(normal, tangent * normalmap.x + binormal * normalmap.y + normal * normalmap.z, normaldepth));
}

void vertex() {
// Output:0

}

void fragment() {
// ScalarUniform:23
	float n_out23p0 = FresnelPower;

// Fresnel:22
	float n_out22p0 = pow(1.0 - clamp(dot(NORMAL, VIEW), 0.0, 1.0), n_out23p0);

// ColorUniform:24
	vec3 n_out24p0 = FresnelColor.rgb;
	float n_out24p1 = FresnelColor.a;

// VectorOp:25
	vec3 n_out25p0 = vec3(n_out22p0) * vec3(n_out24p0);

// ColorUniform:5
	vec3 n_out5p0 = Color.rgb;
	float n_out5p1 = Color.a;

// Input:29
	vec3 n_out29p0 = vec3(UV, 0.0);

// VectorUniform:31
	vec3 n_out31p0 = Tiling;

// VectorOp:30
	vec3 n_out30p0 = n_out29p0 * n_out31p0;

// VectorUniform:28
	vec3 n_out28p0 = Offset;

// TilingAndOffsetUV:27
	vec3 n_out27p0;
	{
		n_out27p0 = vec3(ti1ingN0ffsetFunc(n_out30p0.xy, n_out28p0.xy), 0);
	}

// Texture:11
	vec3 n_out11p0;
	float n_out11p1;
	{
		vec4 Ice_Texture_tex_read = texture(Ice_Texture, n_out27p0.xy);
		n_out11p0 = Ice_Texture_tex_read.rgb;
		n_out11p1 = Ice_Texture_tex_read.a;
	}

// Input:9
	vec3 n_out9p0 = vec3(SCREEN_UV, 0.0);

// VectorDecompose:12
	float n_out12p0 = n_out11p0.x;
	float n_out12p1 = n_out11p0.y;
	float n_out12p2 = n_out11p0.z;

// ScalarOp:10
	float n_out10p0 = dot(n_out9p0, vec3(0.333333, 0.333333, 0.333333)) * n_out12p0;

// ScalarOp:17
	float n_out17p0 = dot(n_out9p0, vec3(0.333333, 0.333333, 0.333333)) + n_out10p0;

// VectorOp:13
	vec3 n_out13p0 = n_out9p0 - vec3(n_out17p0);

// ScalarUniform:16
	float n_out16p0 = RefractionAmount;

// VectorOp:14
	vec3 n_out14p0 = n_out13p0 * vec3(n_out16p0);

// VectorOp:15
	vec3 n_out15p0 = n_out14p0 + n_out9p0;

// Input:7

// Texture:8
	vec3 n_out8p0;
	float n_out8p1;
	{
		vec4 SCREEN_TEXTURE_tex_read = texture(SCREEN_TEXTURE, n_out15p0.xy);
		n_out8p0 = SCREEN_TEXTURE_tex_read.rgb;
		n_out8p1 = SCREEN_TEXTURE_tex_read.a;
	}

// VectorOp:20
	vec3 n_out20p0 = n_out11p0 + n_out8p0;

// VectorOp:21
	vec3 n_out21p0 = n_out5p0 * n_out20p0;

// VectorOp:26
	vec3 n_out26p0 = n_out25p0 + n_out21p0;

// ScalarUniform:2
	float n_out2p0 = Metallic;

// ScalarUniform:3
	float n_out3p0 = Smoothness;

// ScalarUniform:4
	float n_out4p0 = Normals;

// ReadNormalMap:18
	vec3 n_out18p0;
	{
		n_out18p0 = read_normalmap(n_out11p0, vec3(n_out4p0), TANGENT, BINORMAL, NORMALMAP_DEPTH);
	}

// Output:0
	ALBEDO = n_out26p0;
	ALPHA = n_out5p1;
	METALLIC = n_out2p0;
	SPECULAR = n_out3p0;
	NORMAL = n_out18p0;

}

void light() {
// Output:0

}"

[sub_resource type="OpenSimplexNoise" id=12]

[sub_resource type="NoiseTexture" id=13]
noise = SubResource( 12 )

[sub_resource type="ShaderMaterial" id=14]
shader = SubResource( 10 )
shader_param/FresnelPower = 2.5
shader_param/FresnelColor = Color( 1, 1, 1, 1 )
shader_param/Color = Color( 0.121569, 0.819608, 0.956863, 1 )
shader_param/Tiling = Vector3( 1, 1, 0 )
shader_param/Offset = Vector3( 0, 0, 0 )
shader_param/RefractionAmount = 1.0
shader_param/Metallic = 0.134
shader_param/Smoothness = 0.627
shader_param/Normals = 0.77
shader_param/Ice_Texture = SubResource( 13 )

[sub_resource type="SphereMesh" id=5]
material = SubResource( 14 )
radial_segments = 4
rings = 1

[sub_resource type="SpatialMaterial" id=15]
flags_unshaded = true
albedo_color = Color( 0, 0.972549, 1, 1 )

[sub_resource type="SphereMesh" id=16]
material = SubResource( 15 )
radial_segments = 4
rings = 1

[sub_resource type="SphereShape" id=2]

[sub_resource type="Animation" id=8]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("Area:scale")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector3( 1, 1, 1 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Area:rotation_degrees")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector3( 0, 0, 0 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("Area:translation")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector3( 0, 1.20812, 0 ) ]
}

[sub_resource type="Animation" id=9]
resource_name = "stamina"
length = 5.0
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("Area:scale")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 2.5, 5 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Vector3( 1, 1, 1 ), Vector3( 1.369, 1.369, 1.369 ), Vector3( 1, 1, 1 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Area:rotation_degrees")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector3( 0, 0, 0 ), Vector3( 0, 360, 0 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("Area:translation")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 2.5, 5 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Vector3( 0, 1.20812, 0 ), Vector3( 0, 1.454, 0 ), Vector3( 0, 1.20812, 0 ) ]
}

[node name="StaminaItem" type="Spatial"]
transform = Transform( 0.154003, 0, 0, 0, 0.154003, 0, 0, 0, 0.154003, 0, 0.290871, 0 )

[node name="Area" type="Area" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.20812, 0 )
script = ExtResource( 1 )

[node name="MeshInstance" type="MeshInstance" parent="Area"]
transform = Transform( 0.702, 0, 0, 0, 0.702, 0, 0, 0, 0.702, 0, 0, 0 )
mesh = SubResource( 5 )
skeleton = NodePath("../..")
material/0 = null

[node name="MeshInstance2" type="MeshInstance" parent="Area"]
transform = Transform( 0.375425, 0, 0, 0, 0.977085, 0, 0, 0, 0.671227, -0.00155511, 0, 0 )
mesh = SubResource( 16 )
skeleton = NodePath("../..")
material/0 = null

[node name="CollisionShape" type="CollisionShape" parent="Area"]
shape = SubResource( 2 )

[node name="SpotLight" type="SpotLight" parent="Area"]
transform = Transform( 4.00346, -2.19673, -0.00034498, 0, -0.000717141, 4.56654, -2.19673, -4.00346, -0.000628713, 0, 7.52327, 0 )
light_energy = 3.162
light_indirect_energy = 5.11
light_specular = 3.436
spot_range = 1.95568
spot_angle = 24.3348

[node name="AudioStreamPlayer2D" type="AudioStreamPlayer2D" parent="."]
position = Vector2( 320, 237 )
stream = ExtResource( 2 )
pitch_scale = 1.77

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
autoplay = "stamina"
anims/RESET = SubResource( 8 )
anims/stamina = SubResource( 9 )

[connection signal="body_entered" from="Area" to="Area" method="_on_Area_body_entered"]
